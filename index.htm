<!DOCTYPE html>
<html>
<head>
    <script type="text/javascript" src="web3.min.js"></script>
    <script type="text/javascript">
        var Web3 = require('web3');
        var web3 = new Web3(web3.currentProvider);
        var contractAbi = [
	{
	    "constant": false,
	    "inputs": [
			{
			    "name": "A1",
			    "type": "uint8"
			},
			{
			    "name": "A2",
			    "type": "uint8"
			},
			{
			    "name": "A3",
			    "type": "uint8"
			},
			{
			    "name": "A4",
			    "type": "uint8"
			},
			{
			    "name": "A5",
			    "type": "uint8"
			},
			{
			    "name": "A6",
			    "type": "uint8"
			},
			{
			    "name": "B1",
			    "type": "uint8"
			}
	    ],
	    "name": "Betting",
	    "outputs": [
			{
			    "name": "Ret",
			    "type": "bool"
			}
	    ],
	    "payable": true,
	    "stateMutability": "payable",
	    "type": "function"
	},
	{
	    "constant": false,
	    "inputs": [],
	    "name": "DoCharity",
	    "outputs": [
			{
			    "name": "Address",
			    "type": "address"
			},
			{
			    "name": "Value",
			    "type": "uint256"
			}
	    ],
	    "payable": true,
	    "stateMutability": "payable",
	    "type": "function"
	},
	{
	    "constant": false,
	    "inputs": [
			{
			    "name": "A1",
			    "type": "uint8"
			},
			{
			    "name": "A2",
			    "type": "uint8"
			},
			{
			    "name": "A3",
			    "type": "uint8"
			},
			{
			    "name": "A4",
			    "type": "uint8"
			},
			{
			    "name": "A5",
			    "type": "uint8"
			},
			{
			    "name": "A6",
			    "type": "uint8"
			},
			{
			    "name": "B1",
			    "type": "uint8"
			}
	    ],
	    "name": "DoLottery",
	    "outputs": [
			{
			    "name": "Ret",
			    "type": "bool"
			}
	    ],
	    "payable": true,
	    "stateMutability": "payable",
	    "type": "function"
	},
	{
	    "constant": false,
	    "inputs": [],
	    "name": "StartLottery",
	    "outputs": [
			{
			    "name": "Ret",
			    "type": "bool"
			}
	    ],
	    "payable": false,
	    "stateMutability": "nonpayable",
	    "type": "function"
	},
	{
	    "inputs": [],
	    "payable": false,
	    "stateMutability": "nonpayable",
	    "type": "constructor"
	},
	{
	    "anonymous": false,
	    "inputs": [
			{
			    "indexed": false,
			    "name": "addr",
			    "type": "address"
			},
			{
			    "indexed": false,
			    "name": "amount",
			    "type": "uint256"
			}
	    ],
	    "name": "CongratsNotice",
	    "type": "event"
	},
	{
	    "constant": true,
	    "inputs": [],
	    "name": "GetBalance",
	    "outputs": [
			{
			    "name": "Balance",
			    "type": "uint256"
			}
	    ],
	    "payable": false,
	    "stateMutability": "view",
	    "type": "function"
	},
	{
	    "constant": true,
	    "inputs": [
			{
			    "name": "Index",
			    "type": "uint256"
			}
	    ],
	    "name": "GetData",
	    "outputs": [
			{
			    "name": "Player",
			    "type": "address"
			},
			{
			    "name": "A1",
			    "type": "uint8"
			},
			{
			    "name": "A2",
			    "type": "uint8"
			},
			{
			    "name": "A3",
			    "type": "uint8"
			},
			{
			    "name": "A4",
			    "type": "uint8"
			},
			{
			    "name": "A5",
			    "type": "uint8"
			},
			{
			    "name": "A6",
			    "type": "uint8"
			},
			{
			    "name": "B1",
			    "type": "uint8"
			}
	    ],
	    "payable": false,
	    "stateMutability": "view",
	    "type": "function"
	},
	{
	    "constant": true,
	    "inputs": [],
	    "name": "GetDataSize",
	    "outputs": [
			{
			    "name": "Size",
			    "type": "uint256"
			}
	    ],
	    "payable": false,
	    "stateMutability": "view",
	    "type": "function"
	},
	{
	    "constant": true,
	    "inputs": [],
	    "name": "GetEndTime",
	    "outputs": [
			{
			    "name": "Ret",
			    "type": "uint256"
			}
	    ],
	    "payable": false,
	    "stateMutability": "view",
	    "type": "function"
	},
	{
	    "constant": true,
	    "inputs": [],
	    "name": "GetStartTime",
	    "outputs": [
			{
			    "name": "Ret",
			    "type": "uint256"
			}
	    ],
	    "payable": false,
	    "stateMutability": "view",
	    "type": "function"
	},
	{
	    "constant": true,
	    "inputs": [],
	    "name": "GetState",
	    "outputs": [
			{
			    "name": "Ret",
			    "type": "string"
			}
	    ],
	    "payable": false,
	    "stateMutability": "view",
	    "type": "function"
	}
        ];
        var contractAddress = "0xb11c91c2402bbfea3a9792b6b6d62951079ef1eb";//合約位址
        var contract;
        var contractInstance;
        var coinbase;
    </script>
</head>
<body>
    <h1>金融科技威力彩Dapp</h1>
    <div></div>
    <div id="user_address">用戶位址:</div>
    <div id="user_network">用戶網段:</div>
    <div id="user_balance">用戶餘額:</div>
    <div id="contract_address">合約位置:</div>
    <div id="lottery_status">樂透狀態:</div>
    <div id="lottery_balance">獎金總額:</div>
    <div id="lottery_count">投注次數:</div>
    <div id="lottery_st">投注開始時間:</div>
    <div id="lottery_ed">投注結束時間:</div>
    <div id="sect1">第一區:<input type="text" id="a1" size="2"><input type="text" id="a2" size="2"><input type="text" id="a3" size="2"><input type="text" id="a4" size="2"><input type="text" id="a5" size="2"><input type="text" id="a6" size="2"></div>
    <div id="sect2">第二區:<input type="text" id="b1" size="2"></div>
    <div id="sect3"><button type="button" onClick="Betting();">投注</button><button type="button" onClick="DoLottery();">開獎</button><button type="button" onClick="StartLottery();">建立</button></div>
    <BR /> <BR />
    <div id="message">Welcome.</div>
    <script type="text/javascript">
        setTimeout(Init, 500);//等一下再初始化

        function Init() {
            //取得用戶位置
            coinbase = web3.eth.coinbase;
            user_address.innerText = "用戶位址:" + coinbase;

            //確認一下網段
            web3.version.getNetwork((err, netId) => {
                switch (netId) {
                    case "1":
                        user_network.innerText = "用戶網段:mainnet";
                        break
                    case "2":
                        user_network.innerText = "用戶網段:deprecated Morden test network";
                        break
                    case "3":
                        user_network.innerText = "用戶網段:opsten test";
                        break
                    default:
                        user_network.innerText = "用戶網段:unknown";
                }
            })

            //取得用戶餘額
            web3.eth.getBalance(coinbase,
                function (error, result) {
                    if (error) {
                        // error handle
                    } else {
                        originalBalance = web3.fromWei(result, 'ether').toFixed(2);
                        user_balance.innerText = "用戶餘額:" + originalBalance + " ether";
                    }
                });

            contract_address.innerText = "合約位置:" + contractAddress;
            //建立合約實例
            contract = web3.eth.contract(contractAbi);
            contractInstance = contract.at(contractAddress);

            //智能合約呼叫-取得樂透狀態
            contractInstance.GetState.call(function (error, result) {
                if (error) {
                    // error handle
                } else {
                    // result is string
                    // do something
                    lottery_status.innerText = "樂透狀態:" + result;
                }
            });

            //智能合約呼叫-取得獎勵總額
            contractInstance.GetBalance.call(function (error, result) {
                if (error) {
                    // error handle
                } else {
                    // result is string
                    // do something
                    lottery_balance.innerText = "獎金總額:" + web3.fromWei(result, 'ether').toFixed(2) + " ether";
                }
            });

            //智能合約呼叫-取得下注次數
            contractInstance.GetDataSize.call(function (error, result) {
                if (error) {
                    // error handle
                } else {
                    // result is string
                    // do something
                    lottery_count.innerText = "投注次數:" + result;
                }
            });

            //取得本期威力彩開始時間
            contractInstance.GetStartTime.call(function (error, result) {
                if (error) {
                    // error handle
                } else {
                    // result is string
                    // do something
                    lottery_st.innerText = "投注開始時間:" + timeConverter(result);
                }
            });

            //取得本期威力彩結束時間
            contractInstance.GetEndTime.call(function (error, result) {
                if (error) {
                    // error handle
                } else {
                    // result is string
                    // do something
                    lottery_ed.innerText = "投注結束時間:" + timeConverter(result);
                }
            });

            var event = contractInstance.CongratsNotice();

            //監聽
            event.watch(function (error, result) {
                message.innerText += "\n中獎事件:恭喜 " + result.args.addr + " ,贏得了頭獎 " + web3.fromWei(result.args.amount, 'ether').toFixed(2) + " ether.";
            });
        }

        //unix time to local time GMT8+
        function timeConverter(UNIX_timestamp) {
            var a = new Date(UNIX_timestamp * 1000);
            var months = ['01', '02', '03', '04', '05', '08', '09', '00', '09', '10', '11', '12'];
            var year = a.getFullYear();
            var month = months[a.getMonth()];
            var date = a.getDate();
            var hour = a.getHours();
            var min = a.getMinutes();
            var sec = a.getSeconds();
            var time = year + "-" + months[a.getMonth()] + "-" + a.getDate() + " " + addZero(hour) + ':' + addZero(min) + ':' + addZero(sec);
            return time;
        }

        //補0
        function addZero(i) {
            if (i < 10) {
                i = "0" + i;
            }
            return i;
        }

        //確認選號是否合理
        function CheckNumber() {
            var _a1 = parseInt(a1.value);
            var _a2 = parseInt(a2.value);
            var _a3 = parseInt(a3.value);
            var _a4 = parseInt(a4.value);
            var _a5 = parseInt(a5.value);
            var _a6 = parseInt(a6.value);
            var _b1 = parseInt(b1.value);

            if (_a1 >= 1 && _a2 > _a1 && _a3 > _a2 && _a4 > _a3 && _a5 > _a4 && _a6 > _a5 && _a6 <= 38 && _b1 >= 1 && _b1 <= 8) {

                return true;
            }

            message.innerText += "\n號碼異常-第一區01-38,第二區01-08不可重複。";

            return false;
        }

        //下注
        function Betting() {
            if (!CheckNumber()) return;
            contractInstance.Betting.sendTransaction(parseInt(a1.value), parseInt(a2.value), parseInt(a3.value), parseInt(a4.value), parseInt(a5.value), parseInt(a6.value), parseInt(b1.value), {
                "from": coinbase,
                "value": '100000000000000000'//至少0.1 ether
            },
                function (error, result) {
                    if (error) {
                        // error handle
                        message.innerText += "\n投注失敗!";
                    } else {
                        // do something
                        message.innerText += "\n投注成功!";
                    }
                });
        }

        //開獎
        function DoLottery() {
            if (!CheckNumber()) return;
            contractInstance.DoLottery.sendTransaction(parseInt(a1.value), parseInt(a2.value), parseInt(a3.value), parseInt(a4.value), parseInt(a5.value), parseInt(a6.value), parseInt(b1.value), {
                "from": coinbase,
                "value": '0'
            },
                function (error, result) {
                    if (error) {
                        // error handle
                        message.innerText += "\n開獎失敗!";
                    } else {
                        // do something
                        message.innerText += "\n開獎成功!";
                    }
                });
        }

        //建立本期彩卷
        function StartLottery() {
            contractInstance.StartLottery.sendTransaction({
                "from": coinbase,
                "value": '0'
            },
                function (error, result) {
                    if (error) {
                        // error handle
                        message.innerText += "\n建立失敗!";
                    } else {
                        // do something
                        message.innerText += "\n建立成功!";
                    }
                });
        }

    </script>
</body>
</html>
